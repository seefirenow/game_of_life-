{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\julan\\\\OneDrive\\\\Pulpit\\\\react-conway-game-of-life-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\julan\\\\OneDrive\\\\Pulpit\\\\react-conway-game-of-life-master\\\\src\\\\App.tsx\";\nimport React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nconst numRows = 50;\nconst numCols = 50;\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App = () => {\n  const _useState = useState(() => {\n    return generateEmptyGrid();\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        grid = _useState2[0],\n        setGrid = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        running = _useState4[0],\n        setRunning = _useState4[1];\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n\n      if (!running) {\n        runningRef.current = true;\n        runSimulation();\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, running ? \"stop\" : \"start\"), React.createElement(\"button\", {\n    onClick: () => {\n      const rows = [];\n\n      for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n      }\n\n      setGrid(rows);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Random\"), React.createElement(\"button\", {\n    onClick: () => {\n      setGrid(generateEmptyGrid());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Wyczy\\u015B\\u0107\"), React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(\".concat(numCols, \", 20px)\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, grid.map((rows, i) => rows.map((col, k) => React.createElement(\"div\", {\n    key: \"\".concat(i, \"-\").concat(k),\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: grid[i][k] ? \"pink\" : undefined,\n      border: \"solid 1px black\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/julan/OneDrive/Pulpit/react-conway-game-of-life-master/src/App.tsx"],"names":["React","useState","useCallback","useRef","produce","numRows","numCols","operations","generateEmptyGrid","rows","i","push","Array","from","App","grid","setGrid","running","setRunning","runningRef","current","runSimulation","g","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","Math","random","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        Random\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        Wyczyść\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"pink\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}