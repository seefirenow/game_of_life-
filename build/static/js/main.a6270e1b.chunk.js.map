{"version":3,"sources":["App.tsx","index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","style","justifyContent","textAlign","onClick","Math","random","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","document","getElementById"],"mappings":"4KAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAG7C,OAAOH,GAqHMK,EAlHO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOP,OAFiB,mBACnBQ,EADmB,KACbC,EADa,OAKIF,oBAAS,GALb,mBAKnBG,EALmB,KAKVC,EALU,KAOpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA9Cf,IA8CiCC,GAAQ,GAAKA,EA7C9C,KA8CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAI,EAAGA,EAxCV,GAwCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EAxCR,GAwCqBA,IAAM,EAA1BA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,oCACE,yBACEa,MAAO,CACLC,eAAgB,SAChBC,UAAW,WAGb,4BACEC,QAAS,WACPpB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAIHL,EAAU,OAAS,SAEtB,4BACEqB,QAAS,WAEP,IADA,IAAM9B,EAAO,GACJC,EAAI,EAAGA,EAtFZ,GAsFyBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAvFX,KAuF2B,kBAAO4B,KAAKC,SAAW,GAAM,EAAI,MAIhExB,EAAQR,KATZ,UAcA,4BACE8B,QAAS,WACPtB,EAAQT,OAFZ,qBAOA,yBACE4B,MAAO,CACLM,QAAS,OACTC,oBAAoB,UAAD,OA1Gf,GA0Ge,WACnBN,eAAgB,SAChBC,UAAW,WAGZtB,EAAK4B,KAAI,SAACnC,EAAMC,GAAP,OACRD,EAAKmC,KAAI,SAACC,EAAKjB,GAAN,OACP,yBACEkB,IAAG,UAAKpC,EAAL,YAAUkB,GACbW,QAAS,WACP,IAAMQ,EAAUrB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQ8B,IAEVX,MAAO,CACLY,MAAO,GACPC,OAAQ,GACRC,gBAAiBlC,EAAKN,GAAGkB,GAAK,aAAUuB,EACxCC,OAAQ,+BC7H1BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a6270e1b.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <div\n        style={{\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"Stop\" : \"Start\"}\n        </button>\n        <button\n          onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n              rows.push(\n                Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n              );\n            }\n\n            setGrid(rows);\n          }}\n        >\n          Random\n        </button>\n        <button\n          onClick={() => {\n            setGrid(generateEmptyGrid());\n          }}\n        >\n          Wyczyść\n        </button>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numCols}, 20px)`,\n            justifyContent: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          {grid.map((rows, i) =>\n            rows.map((col, k) => (\n              <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: 20,\n                  height: 20,\n                  backgroundColor: grid[i][k] ? \"black\" : undefined,\n                  border: \"solid 1px black\",\n                }}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}